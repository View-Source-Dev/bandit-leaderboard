const canvases=document.querySelectorAll(".js-swirl-canvas"),generateCanvas=(e,t,r)=>{let o=0;let n=1e3*Math.random()-500;const a=1e3/30;let i=[{foreground:"#021CEE",background:"#0C0C0C"},{foreground:"#D1D2D1",background:"#021CEE"}],s=0,c=0;const d="swirl-canvas-"+t;e.id=d;const E=i.length,T=E-1,l=document.querySelectorAll(".js-benefits-button");var u,g,h;let m=!0;let R=null;const _=async()=>{try{const t=await fetch("assets/shader.frag");if(R=await t.text(),!R)return void console.error("Fragment shader not loaded");l[0]&&l[0].addEventListener("click",(()=>{P(-1)})),l[1]&&l[1].addEventListener("click",(()=>{P(1)})),setInterval((()=>{P(1)}),1e4),g=e.getContext("webgl"),h=g.createProgram();const r=g.createShader(g.VERTEX_SHADER);if(g.shaderSource(r,"\n\t\tattribute vec2 aVertexPosition;\n\t\tattribute vec2 aTextureCoord;\n\t\tvarying highp vec2 vTextureCoord;\n\n\t\tvoid main(void) {\n\t\t\tgl_Position = vec4(aVertexPosition, 0.0, 1.0);\n\t\t\tvTextureCoord = aTextureCoord;\n\t\t}\n\t\t\t\t"),g.compileShader(r),!g.getShaderParameter(r,g.COMPILE_STATUS)){const e=g.getShaderInfoLog(r);return void console.error("Vertex shader compilation error:",e)}const o=g.createShader(g.FRAGMENT_SHADER);if(g.shaderSource(o,R),g.compileShader(o),!g.getShaderParameter(o,g.COMPILE_STATUS)){const e=g.getShaderInfoLog(o);return void console.error("Fragment shader compilation error:",e)}g.attachShader(h,r),g.attachShader(h,o),g.linkProgram(h),g.useProgram(h);const n=g.createBuffer();g.bindBuffer(g.ARRAY_BUFFER,n);const a=new Float32Array([-1,1,0,1,-1,-1,0,0,1,1,1,1,1,-1,1,0]);g.bufferData(g.ARRAY_BUFFER,a,g.STATIC_DRAW);const i=g.getAttribLocation(h,"aVertexPosition");g.vertexAttribPointer(i,2,g.FLOAT,!1,4*Float32Array.BYTES_PER_ELEMENT,0),g.enableVertexAttribArray(i);const s=g.getAttribLocation(h,"aTextureCoord");g.vertexAttribPointer(s,2,g.FLOAT,!1,4*Float32Array.BYTES_PER_ELEMENT,2*Float32Array.BYTES_PER_ELEMENT),g.enableVertexAttribArray(s);const c=g.createTexture();g.bindTexture(g.TEXTURE_2D,c);const d=new Image;d.onload=function(){g.bindTexture(g.TEXTURE_2D,c),g.texImage2D(g.TEXTURE_2D,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,d),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,g.REPEAT),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,g.REPEAT),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,g.LINEAR_MIPMAP_LINEAR),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,g.LINEAR),g.generateMipmap(g.TEXTURE_2D),f()},d.crossOrigin="use-credentials",d.src="assets/img-noise.png"}catch(e){console.error("Error loading the shader:",e)}},A=e=>[parseInt(e.slice(1,3),16)/255,parseInt(e.slice(3,5),16)/255,parseInt(e.slice(5,7),16)/255],f=()=>{if(!m)return;n+=a/1e3,g.clearColor(0,0,0,1),g.clear(g.COLOR_BUFFER_BIT);const t=g.getUniformLocation(h,"u_resolution");g.uniform2fv(t,[e.width,e.height]);const r=g.getUniformLocation(h,"u_time");g.uniform1fv(r,[n]);const d=A(i[s].foreground),E=A(i[c].foreground).map(((e,t)=>e+(d[t]-e)*o)),T=A(i[s].background),l=A(i[c].background).map(((e,t)=>e+(T[t]-e)*o)),u=g.getUniformLocation(h,"u_foreground_color"),R=g.getUniformLocation(h,"u_background_color");g.uniform3fv(u,E),g.uniform3fv(R,l),o<1&&(o+=a/1500,o>1&&(o=1)),g.drawArrays(g.TRIANGLE_STRIP,0,4),setTimeout((()=>requestAnimationFrame(f)),a)},v=()=>{if(e)try{let t=window.devicePixelRatio||1;const r=e.getBoundingClientRect();window.innerWidth/t<500&&(t=1.5),e.width=r.width*t,e.height=r.height*t,g.viewport(0,0,e.width,e.height)}catch(e){console.error("Error resizing the canvas:",e)}},L=()=>{u&&clearTimeout(u),u=setTimeout((()=>{v()}),100)},P=e=>{c=s,s=s+e==E?0:s+e==-1?T:s+e,o=0},S=new MutationObserver((t=>{for(const r of t)"childList"===r.type&&(r.removedNodes.length>0&&r.removedNodes.forEach((t=>{t.id===d&&(m=!1,e.removeEventListener("click",P))})),r.addedNodes.length>0&&r.addedNodes.forEach((t=>{t.id===d&&(e=t,m=!0,_())})))}));window.addEventListener("load",(()=>{_().then((()=>{v(),setTimeout(v,600),setTimeout(v,1500)})),window.addEventListener("resize",L),S.observe(document.body,{childList:!0,subtree:!0})})),r&&_().then((()=>{v(),setTimeout(v,600)}))};canvases.forEach(((e,t)=>{generateCanvas(e,t)}));